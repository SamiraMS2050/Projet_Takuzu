sds <-numeric(27)
for (i in 1:27) {
colonne<-V_densités[,i]
variance<-sum((colonne - mean(colonne))^2) /1000
sds[i]<-sqrt(variance)
}
# Afficher les écarts-types
View(sds)
print(sds)
datapeuple<- scale(V_densités, center = means, scale = sds)
View(datapeuple)
dp<-dist(datapeuple, method="euclidean")
DP<-as.data.frame(as.table(dp))
CAHDP<-hclust(d=dp,method="ward.D")
View(CAHDP)
# Effectuer l'analyse hiérarchique (CAH)
CAHDP <- hclust(d = dp, method = "ward.D")
# Charger les bibliothèques nécessaires
library(cluster)
library(ggplot2)
# Couper l'arbre pour obtenir différentes partitions (2, 3, et 4 classes)
PDP2 <- cutree(CAHDP, k = 2)
PDP3 <- cutree(CAHDP, k = 3)
PDP4 <- cutree(CAHDP, k = 4)
#Calcul des R^2 des 3 partitons pour choisir la meilleure
# Fonction pour calculer la variance intra-cluster et R²
calculate_R2 <- function(clusters, data) {
total_variance <- sum((data - mean(data))^2)
within_variance <- 0
for (k in unique(clusters)) {
cluster_data <- data[clusters == k, ]
within_variance <- within_variance + sum((cluster_data - mean(cluster_data))^2)
}
R2 <- 1 - (within_variance / total_variance)
return(R2)
}
R2_2 <- calculate_R2(PDP2, datapeuple)
R2_3 <- calculate_R2(PDP3, datapeuple)
R2_4 <- calculate_R2(PDP4, datapeuple)
R2_PDP4= cbind(rep(0 , ncol(datapeuple)))
for (i in cbind(1:ncol(datapeuple))) {R2_PDP4[i] =
summary(lm(datapeuple[,i]~as.factor(PDP4)))$r.squared}
row.names(R2_PDP4) = colnames(datapeuple)
View(R2_PDP4)
#Calcul du R^2 de la partition
R2G_PV4 = mean(R2_PDP4)
print(R2G_PV4)
R2_4 <- calculate_R2(PDP4, datapeuple)
# Créer un dataframe avec les résultats
R2_results <- data.frame(
`Nombre de Classes` = c(2, 3, 4),
`R^2` = c(R2_2, R2_3, R2_4)
)
# Afficher le dataframe
View(R2_results)
R2_PDP2= cbind(rep(0 , ncol(datapeuple)))
for (i in cbind(1:ncol(datapeuple))) {R2_PDP2[i] =
summary(lm(datapeuple[,i]~as.factor(PDP2)))$r.squared}
row.names(R2_PDP2) = colnames(datapeuple)
View(R2_PDP2)
#Calcul du R^2 de la partition
R2G_PV2 = mean(R2_PDP2)
print(R2G_PV2)
R2_PDP3= cbind(rep(0 , ncol(datapeuple)))
for (i in cbind(1:ncol(datapeuple))) {R2_PDP3[i] =
summary(lm(datapeuple[,i]~as.factor(PDP3)))$r.squared}
row.names(R2_PDP3) = colnames(datapeuple)
#Calcul du R^2 de la partition
R2G_PV3 = mean(R2_PDP3)
print(R2G_PV3)
print(R2G_PV4)
# Créer un dataframe avec les résultats
R2_results <- data.frame(
`Nombre de Classes` = c(2, 3, 4),
`R^2` = c(R2G_PV2, R2G_PV3, R2G_PV4)
)
# Afficher le dataframe
View(R2_results)
# Charger les bibliothèques nécessaires
library(gridExtra)
# Créer un tableau formaté
table <- tableGrob(R2_results)
# Sauvegarder le tableau en image PNG
png("R2_results_table.png", width = 800, height = 600)
grid.draw(table)
dev.off()
grid.draw(table)
dev.off()
# Charger les bibliothèques nécessaires
library(gridExtra)
# Créer un tableau formaté
table <- tableGrob(R2_results)
# Sauvegarder le tableau en image PNG
png("R2_results_table.png", width = 800, height = 600)
grid.draw(table)
dev.off()
grid.draw(table)
grid.draw(table)
dev.off()
png("R2_results_table.png", width = 800, height = 600)
grid.draw(table)
library(gridExtra)
library(grid)
# Sauvegarder le tableau en image PNG
png("R2_results_table.png", width = 800, height = 600)
grid.draw(table)
dev.off()
grid.draw(table)
dev.off()
dev.off()
grid.draw(table)
#Calcul du R^2 de la partition
R2G_PV4 = mean(R2_PDP4)
print(R2G_PV4)
# transformation de la variable qualitative en matrice d'indicatrices
IC4DP = data.frame(model.matrix(~as.factor(PDP24)-1))
# transformation de la variable qualitative en matrice d'indicatrices
IC4DP = data.frame(model.matrix(~as.factor(PDP4)-1))
#Calcul des centres de gravités
mIC4DP = as.matrix(IC4DP)
mDP = as.matrix(datapeuple)
CentresC4 = solve(t(mIC4DP) %*% mIC4DP) %*% t(mIC4DP)%*% mDP
View(CentresC4)
#K-means à partir des centres initiaux
KMDP4 = kmeans(datapeuple, CentresC4)
View(KMDP4)
print(KMDP2$cluster)
print(KMDP4$cluster)
# Créer une liste des individus numérotés de 1 à 1000
datapeuple <- 1:1000
# Organiser les individus par classe à partir de KMDP4$cluster
resultats_par_classe <- split(datapeuple, KMDP4$cluster)
# Affichage des résultats par classe
for (classe in names(resultats_par_classe)) {
cat("Classe :", classe, "\n")
cat("Individus :", paste(resultats_par_classe[[classe]], collapse = ", "), "\n\n")
}
# Transformer les résultats en un tableau formaté
resultats_tables <- do.call(rbind, lapply(names(resultats_par_classe), function(classe) {
data.frame(
Classe = paste("Classe", classe),
Individus = paste(resultats_par_classe[[classe]], collapse = ", ")
)
}))
# Exporter les résultats en tant qu'image
png("resultats_par_classe.png", width = 1200, height = 800)
grid.table(resultats_tables)
dev.off()
grid.table(resultats_tables)
View(resultats_tables)
#Boxplot
boxplot(datapeuple[,j]~as.factor(KMDP4$cluster))
# Centrer et réduire
datapeuple<- scale(V_densités, center = means, scale = sds)
#Boxplot
boxplot(datapeuple[,j]~as.factor(KMDP4$cluster))
# Couper l'arbre pour obtenir différentes partitions (2, 3, et 4 classes)
PDP2 <- cutree(CAHDP, k = 2)
# transformation de la variable qualitative en matrice d'indicatrices
IC2DP = data.frame(model.matrix(~as.factor(PDP2)-1))
#Calcul des centres de gravités
mIC2DP = as.matrix(IC2DP)
mDP = as.matrix(datapeuple)
CentresC2 = solve(t(mIC2DP) %*% mIC2DP) %*% t(mIC2DP)%*% mDP
#K-means à partir des centres initiaux
KMDP2 = kmeans(datapeuple, CentresC2)
print(KMDP2$cluster)
View(datapeuple1)
# Créer une liste des individus numérotés de 1 à 1000
datapeuple1 <- 1:1000
View(datapeuple1)
# Organiser les individus par classe à partir de KMDP4$cluster
resultats_par_classe <- split(datapeuple1, KMDP4$cluster)
View(resultats_par_classe)
cat("Individus :", paste(resultats_par_classe[[classe]], collapse = ", "), "\n\n")
# Affichage des résultats par classe
for (classe in names(resultats_par_classe)) {
cat("Classe :", classe, "\n")
cat("Individus :", paste(resultats_par_classe[[classe]], collapse = ", "), "\n\n")
}
resultats_par_classe[["2"]]
resultats_par_classe[["1"]]
resultats_par_classe[["4"]]
q()
q()
ozone<-read.table('/Users/USER/Desktop/M1 SSD/Semestre 2/Modèle Linéaire/ozone.txt',header=TRUE,sep='')
View(ozone)
plot(ozone[1],ozone[3])
plot(ozone$maxO3,ozone$T12)
R<-lm(y~x,data=ozone)
#Calcul des estimateurs
x<-ozone$T12
y<-ozone$maxO3
R<-lm(y~x,data=ozone)
summary(R)
R<-lm(y~x,data=ozone)
plot(ozone$maxO3,ozone$T12)
R<-lm(y~x,data=ozone)
plot(ozone$maxO3,ozone$T12)
abline(R,color='pink')
R<-lm(y~x,data=ozone)
plot(ozone$maxO3,ozone$T12)
abline(R,color='pink')
abline(R,col='pink')
R<-lm(y~x,data=ozone)
plot(ozone$maxO3,ozone$T12)
abline(R,col='pink')
R<-lm(y~x,data=ozone)
plot(ozone$maxO3,ozone$T12)
abline(R,col='pink')
R<-lm(y~x,data=ozone)
plot(y,x)
abline(R,col='pink')
R<-lm(y~x,data=ozone)
plot(y,x)
abline(R,col='blue'
R<-lm(y~x,data=ozone)
R<-lm(y~x,data=ozone)
plot(y,x)
abline(R,col="blue")
R<-lm(y~x,data=ozone)
plot(y,x)
abline(R, col="blue")
R<-lm(y~x,data=ozone)
plot(y,x)
abline(R, col="blue")
R<-lm(y~x,data=ozone)
plot(x,y)
abline(R, col="blue")
beta0<- -27.4
beta1<- 5.46
y_hat<-beta0+beta1*x
résidus<- y-y_hat
#Historamme
hist(résidus,
main = "Histogramme des résidus",
xlab = "Valeurs",
ylab = "Fréquence",
col = "lightblue",
border = "black")
means(résidus)
mean(résidus)
beta1<- 5.5
#Ajuster les valeurs de y chapeau
y_hat<-beta0+beta1*x
#calcul des résidus
résidus<- y-y_hat
#Historamme
hist(résidus,
main = "Histogramme des résidus",
xlab = "Valeurs",
ylab = "Fréquence",
col = "lightblue",
border = "black")
mean(résidus)
#determiner sigma2 chapeau
n<-length(y)
sigma2_hat<-sum(résidus^2)\(n-2)
sigma2_hat<-sum(résidus^2)\\(n-2)
sigma2_hat<-sum(résidus^2)/(n-2)
sigma_hat<- sqrt(sigma2_hat)
library(datasets)
library(ggplot2)
c<-ggplot(mpg)
c+geom_histogram(binwidth = 5)
c<-ggplot(dataset,aes=mpg)
c<-ggplot(datasets,aes=mpg)
c<-ggplot(mtcars,aes=mpg)
c+geom_histogram(binwidth = 5)
c+geom_histogram(mpg)
c<-ggplot(mtcars)
c+geom_histogram(mpg)
c<-ggplot(mtcars,aes(x=mpg))
c+geom_histogram(bins=4)
c+geom_histogram(bins=5)
c+geom_histogram(bins=5,binwidth = 2)
c+geom_histogram(bins=5,binwidth =5)
c+geom_histogram(bins=5,binwidth =5)+theme_classic()
c+geom_histogram(bins=5,binwidth =5,fill="lightblue")+theme_classic()
c+geom_histogram(bins=5,binwidth =5,fill="lightblue",colour="black")+
theme_classic()
#colour pour colorier les bords et fill pour colorier l'histogramme
d<-ggplot2(mtcars,aes(x=cyl))
#colour pour colorier les bords et fill pour colorier l'histogramme
d<-ggplot(mtcars,aes(x=cyl))
d+geom_bar()
d+geom_bar(fill="pink")
d+geom_bar(fill="pink")+
theme_classic()
e<-ggplot(mtcars,aes(x=disp,y=mpg))
e+geom_point(size=0.5)
e+geom_point(size=0.9)+
theme_classic()
e<-ggplot(mtcars,aes(x=disp,y=mpg),colour=cyl)
e+geom_point(size=0.9)+
theme_classic()
e<-ggplot(mtcars,aes(x=disp,y=mpg,colour=cyl))
e+geom_point(size=0.9)+
theme_classic()
x_values <- seq(-2*pi, 2*pi, length.out = 100)
# Créer un data frame avec x et sin(x)
df <- data.frame(x = x_values, y = sin(x))
x_values <- seq(-2*pi, 2*pi)
# Créer un data frame avec x et sin(x)
df <- data.frame(x = x_values, y = sin(x))
#Exercice 2
# Générer une séquence de valeurs pour x
x_values <- seq(-2*pi, 2*pi, length.out = 100)
# Créer un data frame avec x et sin(x)
df <- data.frame(x = x_values, y = sin(x))
#Exercice 2
# Générer une séquence de valeurs pour x
x_values <- seq(-2*pi, 2*pi, length.out = 100)
# Créer un data frame avec x et sin(x)
df <- data.frame(x = x_values, y = sin(x))
# Créer un data frame avec x et sin(x)
df <- data.frame(x = x_values, y = sin(x))
#Exercice 2
# Générer une séquence de valeurs pour x
x_values <- seq(-2*pi, 2*pi, length.out = 100)
# Créer un data frame avec x et sin(x)
df <- data.frame(x = x_values, y = sin(x))
help(sin(x))
help(sin)
help("data.frame")
# Créer un data frame avec x et sin(x)
df <- data.frame(x = x_values, y = sin(x))
# Créer un data frame avec x et sin(x)
df <- data.frame(x_values, y = sin(x))
#Exercice 2
# Générer une séquence de valeurs pour x
x_values <- seq(-2*pi, 2*pi, length.out = 100)
# Créer un data frame avec x et sin(x)
df <- data.frame(x_values, y = sin(x))
x_values
# Créer un data frame avec x et sin(x)
df <- data.frame(x_values)
df
# Créer un data frame avec x et sin(x)
df <- data.frame(x_values,sin(x_values))
df
ggplot(df, aes(x = x_values, y = sin.x_values.)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
ggtitle("Courbe de la fonction sin(x)") +
xlab("x") + ylab("sin(x)") +
theme_minimal()
ggplot(df, aes(x = x_values, y = sin.x_values.)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
ggtitle("Courbe de la fonction sin(x)") +
xlab("x") + ylab("sin(x)") +
theme_classic()
ggplot(df, aes(x = x_values, y = sin.x_values.)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
ggtitle(" fonction sin(x)") +
xlab("x") + ylab("sin(x)") +
theme_classic()
dp <- data.frame(x_values,cos(x_values))
ggplot(df, aes(x = x_values, y = sin.x_values.)) +
geom_line(color = "red", size = 1) +  # Tracer la courbe
ggtitle(" fonction cos(x)") +
xlab("x") + ylab("cos(x)") +
theme_classic()
help("facet_wrap")
help(geom_vline)
ggplot(df, aes(x = x_values, y = sin.x_values.)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
ggtitle(" fonction sin(x)") +
xlab("x") + ylab("sin(x)") +
geom_vline(xintercept = 1)+
theme_classic()
ggplot(df, aes(x = x_values, y = sin.x_values.)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
ggtitle(" fonction sin(x)") +
xlab("x") + ylab("sin(x)") +
geom_hline(xintercept = 1)+
theme_classic()
help(geom_vline)
ggplot(df, aes(x = x_values, y = sin.x_values.)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
ggtitle(" fonction sin(x)") +
xlab("x") + ylab("sin(x)") +
geom_hline(yintercept = 1)+
theme_classic()
ggplot(df, aes(x = x_values, y = sin.x_values.)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
ggtitle(" fonction sin(x)") +
xlab("x") + ylab("sin(x)") +
geom_hline(yintercept = 1)+geom_hline(yintercept = -1)+
theme_classic()
ggplot(df, aes(x = x_values, y = sin.x_values.)) +
geom_line(color = "red", size = 1) +
geom_hline(yintercept = 1)+geom_hline(yintercept = -1)+# Tracer la courbe
ggtitle(" fonction cos(x)") +
xlab("x") + ylab("cos(x)") +
theme_classic()
# Générer une séquence de valeurs pour x
x_values <- seq(-2*pi, 2*pi, length.out = 100)
# Créer un data frame avec x, y (sinus et cosinus) et une variable indicatrice de fonction
df <- data.frame(
x = rep(x_values, 2),  # Répéter les x pour les deux fonctions
y = c(sin(x_values), cos(x_values)),  # Concaténer les valeurs de sin(x) et cos(x)
function_type = rep(c("sin(x)", "cos(x)"), each = length(x_values))  # Ajouter une colonne pour identifier la fonction
)
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
facet_wrap(~ function_type) +  # Créer des facettes pour chaque fonction
ggtitle("Courbes de sin(x) et cos(x)") +
xlab("x") + ylab("Valeur") +
theme_minimal()
theme_minimal()
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
facet_wrap(~ function_type) +
geom_hline(yintercept = 1)+ geom_hline(yintercept = -1)+ # Créer des facettes pour chaque fonction
ggtitle("Courbes de sin(x) et cos(x)") +
xlab("x") + ylab("Valeur") +
theme_minimal()
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +  # Tracer la courbe
facet_wrap(~ function_type) +
geom_hline(yintercept = 1)+ geom_hline(yintercept = -1)+ # Créer des facettes pour chaque fonction
ggtitle("Courbes de sin(x) et cos(x)") +
xlab("x") + ylab("Valeur") +
theme_classic()
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "purple", size = 1) +  # Tracer la courbe
facet_wrap(~ function_type) +
geom_hline(yintercept = 1)+ geom_hline(yintercept = -1)+ # Créer des facettes pour chaque fonction
ggtitle("Courbes de sin(x) et cos(x)") +
xlab("x") + ylab("Valeur") +
theme_classic()
ggplot(df, aes(x = x, y = y)) +
geom_line(color = function_type, size = 1) +  # Tracer la courbe
facet_wrap(~ function_type) +
geom_hline(yintercept = 1,size=2)+ geom_hline(yintercept = -1,size=2)+ # Créer des facettes pour chaque fonction
ggtitle("Courbes de sin(x) et cos(x)") +
xlab("x") + ylab("Valeur") +
theme_classic()
# Créer un data frame avec x, y (sinus et cosinus) et une variable indicatrice de fonction
df <- data.frame(
x = rep(x_values, 2),  # Répéter les x pour les deux fonctions
y = c(sin(x_values), cos(x_values)),  # Concaténer les valeurs de sin(x) et cos(x)
function_type = rep(c("sin(x)", "cos(x)"), each = length(x_values))  # Ajouter une colonne pour identifier la fonction
)
ggplot(df, aes(x = x, y = y)) +
geom_line(color = function_type, size = 1) +  # Tracer la courbe
facet_wrap(~ function_type) +
geom_hline(yintercept = 1,size=2)+ geom_hline(yintercept = -1,size=2)+ # Créer des facettes pour chaque fonction
ggtitle("Courbes de sin(x) et cos(x)") +
xlab("x") + ylab("Valeur") +
theme_classic()
# Créer un data frame avec x, y (sinus et cosinus) et une variable indicatrice de fonction
df <- data.frame(
x = rep(x_values, 2),  # Répéter les x pour les deux fonctions
y = c(sin(x_values), cos(x_values)),  # Concaténer les valeurs de sin(x) et cos(x)
function_type = rep(c("sin(x)", "cos(x)"), each = length(x_values))  # Ajouter une colonne pour identifier la fonction
)
ggplot(df, aes(x = x, y = y)) +
geom_line(color = function_type, size = 1) +  # Tracer la courbe
facet_wrap(~ function_type) +
geom_hline(yintercept = 1,size=2)+ geom_hline(yintercept = -1,size=2)+ # Créer des facettes pour chaque fonction
ggtitle("Courbes de sin(x) et cos(x)") +
xlab("x") + ylab("Valeur") +
theme_classic()
ggplot(df, aes(x = x, y = y)) +
geom_line(color="purple" , size = 1) +  # Tracer la courbe
facet_wrap(~ function_type) +
geom_hline(yintercept = 1,size=2)+ geom_hline(yintercept = -1,size=2)+ # Créer des facettes pour chaque fonction
ggtitle("Courbes de sin(x) et cos(x)") +
xlab("x") + ylab("Valeur") +
theme_classic()
#Exercice 3
x<-runif(100)
epsilon<-rnorm(100,mean=0,std=0.04)
y<-3+x+epsilon
epsilon<-rnorm(100,mean=0,sd=0.04)
y<-3+x+epsilon
y+geom_smooth()
data<-data.frame(x,y)
lm<-ggplot(data,aes(x=x,y=y))
lm+geom_smooth()
lm+geom_point()+geom_smooth()
help(geom_smooth)
lm+geom_point()+geom_smooth()
lm+geom_point()+geom_smooth()+theme_classic()
D<-data.frame(x,y)
model<-lm(y~x,data=D)
lm<-ggplot(D,aes(x=x,y=y))
lm+geom_point()+theme_classic()
epsilon<-rnorm(100,mean=0,sd=sqrt(2))
y<-3+x+epsilon
model<-lm(y~x,data=D)
D<-data.frame(x,y)
lm<-ggplot(D,aes(x=x,y=y))
lm+geom_point()+theme_classic()
lm+geom_point()+geom_abline(intercept=3,slope=1)+theme_classic()
lm+geom_point()+geom_abline(aes(intercept=3,slope=1))+theme_classic()
lm+geom_point(size=2)+geom_abline(aes(intercept=3,slope=1))+theme_classic()
lm+geom_point(size=2)+geom_abline(aes(intercept=3,slope=1),colour="blue",linewidth=2)+theme_classic()
summary(model)
model$residuals
View(D)
View(lm)
unlink("~é
unlink("~/ .RData")
unlink("~/ .RData")
q()
setwd("~/programmation R/takuzuGame")
devtools::load_all()
devtools::install()
library(takuzuGame)
run_takuzu_app()
